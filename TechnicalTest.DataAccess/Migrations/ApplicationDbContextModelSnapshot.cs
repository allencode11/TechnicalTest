// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TechnicalTest.DataAccess;

namespace TechnicalTest.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TechnicalTest.DataAccess.Models.Address", b =>
                {
                    b.Property<string>("AddressLine1")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("AddressLine2")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("AddressLine3")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("City")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("CountryIsoCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Locale")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Postcode")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("State")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("AddressLine1");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("TechnicalTest.DataAccess.Models.GetRegistrationResponse", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Locale")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizationName")
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("PersonEmail")
                        .HasColumnType("nvarchar(254)");

                    b.Property<string>("RegistrationDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationName");

                    b.HasIndex("PersonEmail");

                    b.ToTable("getRegistrationResponses");
                });

            modelBuilder.Entity("TechnicalTest.DataAccess.Models.Organization", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("AddressLine1")
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Name");

                    b.HasIndex("AddressLine1");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("TechnicalTest.DataAccess.Models.Person", b =>
                {
                    b.Property<string>("Email")
                        .HasMaxLength(254)
                        .HasColumnType("nvarchar(254)");

                    b.Property<string>("AddressLine1")
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("FirtName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Email");

                    b.HasIndex("AddressLine1");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("TechnicalTest.DataAccess.Models.RegistrationResponse", b =>
                {
                    b.Property<string>("RegistrationId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RegistrationId");

                    b.ToTable("registrationResponses");
                });

            modelBuilder.Entity("TechnicalTest.DataAccess.Models.GetRegistrationResponse", b =>
                {
                    b.HasOne("TechnicalTest.DataAccess.Models.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationName");

                    b.HasOne("TechnicalTest.DataAccess.Models.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonEmail");

                    b.Navigation("Organization");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("TechnicalTest.DataAccess.Models.Organization", b =>
                {
                    b.HasOne("TechnicalTest.DataAccess.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressLine1");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("TechnicalTest.DataAccess.Models.Person", b =>
                {
                    b.HasOne("TechnicalTest.DataAccess.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressLine1");

                    b.Navigation("Address");
                });
#pragma warning restore 612, 618
        }
    }
}
